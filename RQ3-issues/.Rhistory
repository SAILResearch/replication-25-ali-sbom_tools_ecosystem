scale_fill_manual(values=c("#999999", "#E69F00"))
# Add identifier column to df1 and df2
df1 <- mutate(cdx_issues, identifier = "CycloneDX")
df2 <- mutate(spdx_issues, identifier = "SPDX")
# Concatenate the data frames vertically
df <- bind_rows(df1, df2)
View(df)
df1 <- df %>%
group_by(Repo,State,identifier) %>%
summarise(n = n())
plot <- ggplot(df1, aes(x=df1$State, y=log(df1$n), fill=df1$identifier)) +
geom_boxplot(position=position_dodge(1)) +
ylab("Log of number of Issues") +
xlab("Issue Status") +
labs(fill="Format Type") +
scale_fill_manual(values=c("#999999", "#E69F00"))
plot
plot <- ggplot(df1, aes(x=df1$State, y=log(df1$n), fill=df1$identifier)) +
geom_boxplot(position=position_dodge(1)) +
ylab("Log of number of Issues") +
xlab("Issue Status") +
labs(fill="Standard") +
scale_fill_manual(values=c("#999999", "#E69F00"))
plot
pdf(file = "cdx_vs_spdx_issues.pdf",width = 8, height = 3)
plot
dev.off()
getwd()
# Comparing the resolve time of each of the closed issues b/w formats
df1 <- df %>%
filter (df$State == "closed")
plot <- ggplot(df1, aes(x=df1$identifier, y=log(df1$time_diff), fill=df1$identifier)) +
geom_violin(position=position_dodge(1)) +
geom_boxplot(width=0.1) +
ylab("Log of issue resolve time (sec)") +
xlab("Format Type") +
theme(legend.position = "none") +
scale_fill_manual(values=c("#999999", "#E69F00"))
plot
plot <- ggplot(df1, aes(x=df1$identifier, y=log(df1$time_diff), fill=df1$identifier)) +
geom_violin(position=position_dodge(1)) +
geom_boxplot(width=0.1) +
ylab("Log of issue resolve time (sec)") +
xlab("Standard") +
theme(legend.position = "none") +
scale_fill_manual(values=c("#999999", "#E69F00"))
pdf(file = "cdx_vs_spdx_resolve_time.pdf",width = 8, height = 3)
plot
dev.off()
df <- read.csv("top250_stats.csv")
#collection date
date1 <- as.POSIXct("2024-05-28", tz = "UTC", format = "%Y-%m-%d")
#repo creation date
date2 <- as.POSIXct(df$creation_date, tz = "UTC", format = "%Y-%m-%d")
# Calculate the difference in days
df$days <- as.numeric(difftime(date1, date2, units = "days"))
df$X <- NULL
#View(df)
df[, 4:14] <- (df[, 4:14] / df$days)
df2 <- df
gathered_df <- gather(df2, attribute, count, -type, -tool_used, -link, -creation_date, -days)
gathered_df$link <- NULL
gathered_df$tool_used <- NULL
gathered_df$creation_date <- NULL
df <- gathered_df
df <- df %>%
filter(attribute!="closedIssues") %>%
filter(attribute!="openIssues")
plot <- ggplot(df, aes(x=reorder(attribute, -(as.numeric(count))), y=log(as.numeric(count)), fill=type)) +
geom_boxplot() +
ylab("Log of Count") + xlab("Github Repository Stats") +
labs(fill = "Format ") +
theme(legend.position="top") +
facet_wrap( ~ attribute, scales="free") +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
)
plot
# load packages
library(dplyr)
library(ggplot2)
setwd("/RQ4-project/dont_touch_this_folder_jimmy")
df <- read.csv("top250_stats.csv")
#collection date
date1 <- as.POSIXct("2024-05-28", tz = "UTC", format = "%Y-%m-%d")
#repo creation date
date2 <- as.POSIXct(df$creation_date, tz = "UTC", format = "%Y-%m-%d")
# Calculate the difference in days
df$days <- as.numeric(difftime(date1, date2, units = "days"))
df$X <- NULL
#View(df)
df[, 4:14] <- (df[, 4:14] / df$days)
df2 <- df
gathered_df <- gather(df2, attribute, count, -type, -tool_used, -link, -creation_date, -days)
gathered_df$link <- NULL
gathered_df$tool_used <- NULL
gathered_df$creation_date <- NULL
df <- gathered_df
df <- df %>%
filter(attribute!="closedIssues") %>%
filter(attribute!="openIssues")
plot <- ggplot(df, aes(x=reorder(attribute, -(as.numeric(count))), y=log(as.numeric(count)), fill=type)) +
geom_boxplot() +
ylab("Log of Count") + xlab("Github Repository Stats") +
labs(fill = "Format ") +
theme(legend.position="top") +
facet_wrap( ~ attribute, scales="free") +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
)
plot
plot <- ggplot(df, aes(x=reorder(attribute, -(as.numeric(count))), y=log(as.numeric(count)), fill=type)) +
geom_boxplot() +
ylab("Log of Count") + xlab("Github Repository Stats") +
labs(fill = "Standard ") +
theme(legend.position="top") +
facet_wrap( ~ attribute, scales="free") +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
)
plot
pdf(file = "../top250_metrics.pdf",width = 4, height = 3.5)
plot
dev.off()
setwd("/RQ3-issues")
setwd("/RQ3-issues")
library("dplyr")
# Analysis on all issues for comparing formats:
cdx_issues = read.csv("CdxIssues.csv")
spdx_issues = read.csv("SpdxIssues.csv")
cdx_issues <- cdx_issues %>%
filter(cdx_issues$Year>=2018)
spdx_issues <- spdx_issues %>%
filter(spdx_issues$Year>=2018)
cdx_repos <- cdx_issues %>%
group_by(Repo) %>%
summarise(n = n())
spdx_repos <- spdx_issues %>%
group_by(Repo) %>%
summarise(n = n())
library(rstatix)
library(coin)
df3 = data.frame(value=c(spdx_repos$n,cdx_repos$n),
type=c(rep("SPDX",length(spdx_repos$n)),
rep("CDX",length(cdx_repos$n))))
# Subset the data for SPDX and CycloneDx types
spdx_data <- df3[df3$type == "SPDX", "value"]
cyclonedx_data <- df3[df3$type == "CDX", "value"]
num_groups <- 2
num_comparisons <- num_groups * (num_groups - 1) / 2
alpha <- 0.05
adjusted_alpha <- alpha / num_comparisons
# Perform Mann-Whitney U test
mwu_test <- wilcox.test(spdx_data, cyclonedx_data, conf.level = 1 - adjusted_alpha)
# Calculate Cliff's delta
cliffs_delta <- function(x, y) {
n1 <- sum(!is.na(x))
n2 <- sum(!is.na(y))
sum(ifelse(outer(x, y, "<"), 1, 0)) / (n1 * n2)
}
delta <- cliffs_delta(spdx_data, cyclonedx_data)
cat("cliff's delta:", delta, "\n")
cat("\n")
cdx_repos <- cdx_issues %>%
group_by(Repo,State) %>%
summarise(n = n())
spdx_repos <- spdx_issues %>%
group_by(Repo,State) %>%
summarise(n = n())
df3 = data.frame(value=c(spdx_repos$n,cdx_repos$n),
type=c(rep("SPDX",length(spdx_repos$n)),
rep("CDX",length(cdx_repos$n))),
state=c(spdx_repos$State,cdx_repos$State)
)
library(boot)
mean_fun <- function(data, indices) {
mean(data[indices, "value"])
}
bootstrap_results <- boot(df3 %>% filter((type == "SPDX")), mean_fun, R = 1000)
boot_means <- boot.ci(bootstrap_results, type = "basic")
num_groups <- 2
num_comparisons <- num_groups * (num_groups - 1) / 2
alpha <- 0.05
adjusted_alpha <- alpha / num_comparisons
# Perform Mann-Whitney U test
mwu_test <- wilcox.test(df3[df3$type=="SPDX" & df3$state=="open","value"],
df3[df3$type=="CDX" & df3$state=="open","value"],
conf.level = 1 - adjusted_alpha)
delta <- cliffs_delta(df3[df3$type=="SPDX" & df3$state=="open","value"],
df3[df3$type=="CDX" & df3$state=="open","value"])
cat("cliff's delta:", delta, "\n")
cat("\n")
mwu_test <- wilcox.test(df3[df3$type=="SPDX" & df3$state=="closed","value"],
df3[df3$type=="CDX" & df3$state=="closed","value"],
conf.level = 1 - adjusted_alpha)
delta <- cliffs_delta(df3[df3$type=="SPDX" & df3$state=="closed","value"],
df3[df3$type=="CDX" & df3$state=="closed","value"])
# Merging the files of spdx and cdx issues
library(dplyr)
library(ggplot2)
# Add identifier column to df1 and df2
df1 <- mutate(cdx_issues, identifier = "CycloneDX")
df2 <- mutate(spdx_issues, identifier = "SPDX")
# Concatenate the data frames vertically
df <- bind_rows(df1, df2)
df1 <- df %>%
group_by(Repo,State,identifier) %>%
summarise(n = n())
df4 <- df1 %>%
group_by(identifier,State) %>%
summarise(sd = sd(n, na.rm = TRUE))
# Comparing the resolve time of each of the closed issues b/w formats
df1 <- df %>%
filter (df$State == "closed")
df4 <- df1 %>%
group_by(identifier) %>%
summarise(sd = sd(time_diff, na.rm = TRUE))
wilcox_result <- df1 %>%
rstatix::wilcox_test(time_diff ~ identifier,p.adjust.method = "bonferroni")
p_value <- wilcox_result$p
p_value
test_statistic <- wilcox_result$statistic
library(effsize)
cohen.d(df1$time_diff ~ df1$identifier)
df1 %>%
rstatix::wilcox_effsize(time_diff ~ identifier,p.adjust.method = "bonferroni")
cdx_time <- mean(df1[df1$identifier=="CycloneDX","time_diff"])
spdx_time <- mean(df1[df1$identifier=="SPDX","time_diff"])
(sd(df1[df1$identifier=="CycloneDX","time_diff"])/sd(df1[df1$identifier=="SPDX","time_diff"]))*100
cdx_time/spdx_time * 100
all_issues <- df
issues_trend <- all_issues %>%
group_by(Year,identifier) %>%
filter((State == "closed")) %>%
filter((Year != "2024")) %>%
summarise(issues = n(),
avg_Resolution_Time = mean(time_diff, na.rm = TRUE))
gathered_df <- gather(issues_trend, Key, Value, -Year, -identifier)
gathered_df$Concatenated <- paste(gathered_df$identifier, gathered_df$Key)
plot <- ggplot(gathered_df %>%
filter((Key == "avg_Resolution_Time")),
aes(group=identifier,
x=as.character(Year),
y=log(Value),
color=identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour="Format")
plot
plot <- ggplot(gathered_df %>%
filter((Key == "issues")),
aes(group=identifier,
x=as.character(Year),
y=(Value),
color=identifier)) +
geom_line() + geom_point() +
ylab("Log of number of issues") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.6, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour="Format")
plot
plot <- ggplot(gathered_df %>%
filter((Key == "avg_Resolution_Time")),
aes(group=identifier,
x=as.character(Year),
y=log(Value),
color=identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour="Format")
plot
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(0, 100))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 100))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 10))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 5))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 10))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 9))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10", limits = c(1, 8))  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log10 of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
pdf(file = "cdx_vs_spdx_resolve_trend.pdf",width = 4, height = 3)
ggplot(gathered_df %>%
filter(Key == "avg_Resolution_Time", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
dev.off()
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
pdf(file = "cdx_vs_spdx_issues_trend.pdf",width = 4, height = 3)
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
dev.off()
pdf(file = "cdx_vs_spdx_issues_trend.pdf",width = 4, height = 3)
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
dev.off()
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.43, 0.18), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.73, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
pdf(file = "cdx_vs_spdx_issues_trend.pdf",width = 4, height = 3)
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.73, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
dev.off()
pdf(file = "cdx_vs_spdx_issues_trend.pdf",width = 4, height = 3)
ggplot(gathered_df %>%
filter(Key == "issues", Value > 0),  # Ensure no zero values
aes(group = identifier,
x = as.character(Year),
y = log10(Value + 0.0001),  # Avoid log(0)
color = identifier)) +
geom_line() + geom_point() +
ylab("Log of issue resolve time (sec)") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9)) +
theme(legend.position = c(0.63, 0.11), legend.direction = "horizontal") +
xlab("Years") +
labs(colour = "Format") +
scale_y_continuous(trans = "log10")  # Ensure proper log scale
dev.off()
